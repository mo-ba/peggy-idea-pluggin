{
  parserClass="com.github.moba.peggyideaplugin.language.parser.PeggyParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Peggy"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.moba.peggyideaplugin.language.psi"
  psiImplPackage="com.github.moba.peggyideaplugin.language.psi.impl"

  elementTypeHolderClass="com.github.moba.peggyideaplugin.language.psi.PeggyTypes"
  elementTypeClass="com.github.moba.peggyideaplugin.language.psi.PeggyElementType"
  tokenTypeClass="com.github.moba.peggyideaplugin.language.psi.PeggyTokenType"

}

peggyFile ::= Grammar

Grammar ::= Skip (TopLevelInitializer Skip)?  (Initializer Skip)? (Rule Skip)*

TopLevelInitializer  ::= LEFT_BRACE CodeBlock RIGHT_BRACE
Initializer  ::= CodeBlock
CodeBlock ::= CODE_BODY {
implements="com.github.moba.peggyideaplugin.language.psi.PeggyCode"
mixin="com.github.moba.peggyideaplugin.language.psi.impl.PeggyCodeImpl"
}

Rule ::= RuleDefinition Skip OP_EQ Skip Expression
RuleDefinition ::=  IDENTIFIER_NAME {
    implements="com.github.moba.peggyideaplugin.language.psi.PeggyDefinition"
    mixin="com.github.moba.peggyideaplugin.language.psi.impl.PeggyDefinitionImpl"
}
Expression ::=  ChoiceExpression
private ChoiceExpression ::= ActionExpression (Skip OP_CHOICE ActionExpression)* Skip
ActionExpression ::= SequenceExpression (Skip CodeBlock)?
private SequenceExpression ::= LabeledExpression (Skip LabeledExpression)*

private LabeledExpression  ::= Pluck? LabelColon? PrefixedExpression
private PrefixedExpression ::= (PrefixedOperator Skip SuffixedExpression) | SuffixedExpression
private SuffixedExpression ::= (PrimaryExpression Skip SuffixedOperator) | RepeatedExpression | PrimaryExpression

LabelColon ::= LabelIdentifier Skip OP_COLON
LabelIdentifier ::= IDENTIFIER_NAME

private RepeatedExpression ::= PrimaryExpression Skip OP_OR Skip Boundaries Skip (OP_COMMA Skip Expression)
Boundaries ::= Boundary? Skip OP_RANGE Skip Boundary?
Boundary ::= INTEGER | IDENTIFIER_NAME | CodeBlock

//| CharacterClassMatcher //todo
//| AnyMatcher //todo
private PrimaryExpression ::=
    LEFT_PAREN Skip Expression Skip RIGHT_PAREN
    | LiteralMatcher
    | RuleReferenceExpression
    | SemanticPredicateExpression

RuleReferenceExpression ::= IDENTIFIER_NAME !(Skip (STRING Skip)? OP_EQ)
SemanticPredicateExpression ::= SemanticPredicateOperator Skip CodeBlock

LiteralMatcher ::= STRING "i"? //todo i

SemanticPredicateOperator ::= OP_AND | OP_NOT

PrefixedOperator ::= OP_DOLLAR | OP_AND | OP_NOT
SuffixedOperator ::= OP_PLUS | OP_STAR | OP_OPTIONAL
private Skip ::= (COMMENT | WHITE_SPACE)* //todo

Pluck ::= OP_PLUCK
Brace ::= (LEFT_BRACE|RIGHT_BRACE)

// todo catch
X ::= INIT_CODE

