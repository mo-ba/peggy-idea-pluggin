/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package com.github.moba.peggyideaplugin.language.lexer;

import com.intellij.psi.tree.IElementType;
import com.github.moba.peggyideaplugin.language.psi.PeggyTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/mb/Documents/UNI/BA/project/peggy-idea-pluggin/src/main/kotlin/com/github/moba/peggyideaplugin/language/grammar/Peggy.flex</tt>
 */
class PeggyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CODE = 2;
  public static final int DOUBLE_STRING = 4;
  public static final int SINGLE_STRING = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 7, 3]
   * Total runtime size is 10416 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<7)|((ch>>3)&0x7f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\u0400\11");

  /* The ZZ_CMAP_Y table has 2560 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\3"+
    "\0\1\17\1\20\1\21\1\20\2\7\1\22\3\7\1\22\71\7\1\23\1\7\1\24\1\0\1\25\1\26"+
    "\2\0\16\27\1\30\1\31\1\32\1\33\2\7\1\34\11\7\1\35\21\7\1\36\1\37\24\7\1\40"+
    "\3\7\1\22\1\41\1\40\4\7\1\0\1\42\4\27\1\43\1\44\1\0\3\7\2\45\3\0\1\27\1\46"+
    "\5\7\1\47\3\27\1\50\1\51\13\7\1\52\1\53\1\54\1\55\1\27\1\56\2\0\1\57\3\7\3"+
    "\27\1\60\12\7\1\61\1\27\1\62\1\0\1\27\1\63\3\7\1\47\1\64\1\20\2\7\1\61\1\65"+
    "\1\66\1\67\2\0\3\7\1\70\10\0\2\7\1\25\5\0\1\71\3\27\1\72\6\7\1\73\2\27\1\74"+
    "\1\7\1\75\1\27\1\40\1\7\1\76\1\77\1\100\2\7\1\101\1\102\1\103\1\53\1\104\1"+
    "\105\1\106\1\75\1\27\1\24\1\0\1\107\1\110\1\100\2\7\1\101\1\111\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\27\1\120\1\0\1\107\1\35\1\34\2\7\1\101\1\121\1"+
    "\103\1\43\1\122\1\123\1\0\1\75\1\27\1\0\1\41\1\107\1\77\1\100\2\7\1\101\1"+
    "\121\1\103\1\53\1\114\1\117\1\106\1\75\1\27\1\41\1\0\1\124\1\125\1\126\1\127"+
    "\1\130\1\125\1\7\1\131\1\132\1\133\1\134\1\0\1\117\1\27\2\0\1\135\1\30\1\101"+
    "\2\7\1\101\1\7\1\136\1\137\1\133\1\140\1\45\1\75\1\27\2\0\1\107\1\30\1\101"+
    "\2\7\1\101\1\141\1\103\1\137\1\133\1\140\1\32\1\75\1\27\1\142\1\0\1\107\1"+
    "\30\1\101\4\7\1\143\1\137\1\144\1\105\1\145\1\75\1\27\1\0\1\37\1\146\1\7\1"+
    "\22\1\37\2\7\1\34\1\147\1\22\1\150\1\151\1\27\1\117\1\27\1\152\1\0\1\40\5"+
    "\7\1\153\1\46\1\154\1\155\1\27\1\156\4\0\1\157\1\160\1\161\1\40\1\162\1\163"+
    "\1\153\1\164\1\165\1\166\1\27\1\167\4\0\1\123\2\0\1\156\1\27\1\156\1\170\1"+
    "\171\1\7\1\40\3\7\1\25\1\42\1\27\1\137\1\172\1\27\1\42\3\27\1\173\1\174\7"+
    "\0\5\7\1\47\1\27\1\175\1\27\1\156\1\61\1\176\1\177\1\200\1\201\1\7\1\202\1"+
    "\203\1\27\1\166\4\7\1\35\1\21\5\7\1\204\51\7\1\126\1\22\1\126\5\7\1\126\4"+
    "\7\1\126\1\22\1\126\1\7\1\22\7\7\1\126\10\7\1\205\4\0\2\7\2\0\12\7\2\206\1"+
    "\40\114\7\1\77\2\7\1\207\2\7\1\45\11\7\1\125\1\7\1\123\1\7\1\30\1\210\1\0"+
    "\2\7\1\210\1\0\2\7\1\211\1\0\1\7\1\30\1\212\1\0\6\7\1\213\3\27\1\214\1\215"+
    "\1\27\1\156\3\0\1\216\1\27\1\156\13\7\1\0\5\7\1\217\10\7\1\206\1\0\3\7\1\22"+
    "\1\27\1\220\1\27\1\220\1\117\1\27\3\7\1\206\1\25\1\0\5\7\1\221\3\7\1\24\1"+
    "\27\1\156\4\0\2\7\1\154\1\220\6\7\1\172\1\155\3\27\1\53\1\27\1\156\1\27\1"+
    "\156\1\145\1\0\1\27\1\166\10\0\1\222\5\7\1\213\1\27\1\222\1\221\1\27\1\156"+
    "\1\0\1\71\1\220\1\0\1\223\3\7\1\74\1\200\1\27\1\63\4\7\1\61\1\27\1\220\1\0"+
    "\4\7\1\213\2\27\1\0\1\27\1\224\1\27\1\63\3\7\1\206\12\0\1\225\2\27\1\226\1"+
    "\227\1\156\30\7\6\27\1\166\1\230\42\7\2\206\4\7\2\206\1\7\1\231\3\7\1\206"+
    "\6\7\1\30\1\165\1\232\1\25\1\233\1\221\1\7\1\25\1\232\1\25\1\234\1\235\3\0"+
    "\1\236\1\0\1\105\1\237\1\0\1\240\1\241\2\0\1\41\1\145\2\0\1\7\1\25\6\0\1\27"+
    "\1\173\1\242\1\27\1\237\1\0\1\243\1\37\1\147\1\244\1\26\1\245\1\7\1\246\1"+
    "\247\1\250\2\0\5\7\1\123\316\0\5\7\1\22\5\7\1\22\20\7\1\25\1\251\1\252\1\0"+
    "\4\7\1\35\1\21\7\7\1\145\1\0\1\105\2\7\1\22\1\0\10\22\4\27\5\0\1\145\72\0"+
    "\1\253\3\0\1\40\1\202\1\244\1\25\1\40\11\7\1\22\1\254\1\40\12\7\1\204\1\247"+
    "\4\7\1\206\1\40\12\7\1\22\2\0\3\7\1\45\6\0\2\7\100\0\266\7\1\206\11\0\272"+
    "\7\1\206\5\0\21\7\1\25\10\0\5\7\1\206\41\7\1\25\2\7\1\27\1\252\2\0\5\7\1\154"+
    "\1\230\1\255\3\7\1\61\12\7\1\156\3\0\1\145\1\7\1\37\14\7\1\100\3\7\1\206\1"+
    "\7\7\0\1\145\1\7\1\256\1\257\2\7\1\47\3\0\6\7\1\221\1\0\1\63\5\7\1\213\1\27"+
    "\1\173\1\0\1\27\1\156\2\27\1\63\1\260\1\27\1\63\2\7\1\61\1\166\2\7\1\154\1"+
    "\27\1\220\1\0\3\7\1\25\1\72\5\7\1\47\1\27\1\237\1\145\1\27\1\156\1\261\1\7"+
    "\1\27\1\262\5\7\1\74\1\155\1\0\1\257\1\263\1\27\1\156\2\7\1\22\1\264\6\7\1"+
    "\177\1\265\1\217\2\0\1\266\1\7\1\47\1\267\1\0\3\270\1\0\2\22\5\7\1\204\1\206"+
    "\1\0\16\7\1\47\1\271\1\27\1\156\164\7\1\221\1\0\2\7\1\22\1\272\5\7\1\221\40"+
    "\0\55\7\1\206\15\7\1\24\4\0\1\22\1\0\1\272\1\273\1\7\1\101\1\22\1\165\1\274"+
    "\15\7\1\24\3\0\1\272\54\7\1\206\2\0\10\7\1\37\6\7\5\0\1\7\1\221\2\27\2\0\2"+
    "\27\1\275\2\0\1\276\4\0\1\30\20\7\1\277\2\0\1\27\1\156\1\40\2\7\1\300\1\40"+
    "\2\7\1\45\1\301\12\7\1\22\3\37\1\302\4\0");

  /* The ZZ_CMAP_A table has 1560 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\2\2\1\2\0\1\3\1\44\1\47\1\0\1\30\1\0\1\40\1\50\1\45\1\46\1"+
    "\6\1\43\1\42\1\0\1\34\1\5\12\32\1\36\2\0\1\35\1\0\1\41\1\11\4\7\1\21\15\7"+
    "\1\25\1\7\1\12\5\7\1\0\1\10\2\0\1\7\1\0\1\23\1\7\1\15\1\17\1\20\3\7\1\14\4"+
    "\7\1\13\1\16\1\24\1\26\1\7\1\22\1\7\1\27\1\4\4\7\1\33\1\37\1\51\7\0\1\2\2"+
    "\0\1\3\11\0\1\7\12\0\1\7\2\0\7\7\1\0\2\7\4\0\4\7\6\0\5\7\7\0\1\7\1\0\1\7\1"+
    "\0\10\31\5\7\1\0\2\7\2\0\4\7\1\0\1\7\6\0\1\7\1\0\3\7\1\0\1\7\1\0\4\7\1\0\13"+
    "\7\1\0\3\7\1\0\5\31\2\0\6\7\1\0\7\7\1\0\1\7\7\0\15\31\1\0\1\31\1\0\2\31\1"+
    "\0\2\31\1\0\1\31\3\7\5\0\3\31\5\0\3\7\7\31\4\0\2\7\1\31\13\7\1\0\1\7\7\31"+
    "\2\0\6\31\2\7\2\31\1\0\4\31\2\7\2\31\3\7\2\0\2\7\1\31\6\7\3\31\2\0\11\7\3"+
    "\31\1\7\6\0\2\31\6\7\4\31\2\7\2\0\2\31\1\7\11\31\1\7\3\31\1\7\5\31\2\0\1\7"+
    "\3\31\7\0\11\31\6\7\3\31\1\7\2\31\1\7\7\31\2\7\2\31\2\0\2\31\1\7\3\31\1\0"+
    "\10\7\2\0\2\7\2\0\6\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\1\31\1\7\3\31\2\0\3\31\1"+
    "\7\10\0\1\31\4\0\2\7\1\0\1\7\1\0\3\31\1\0\6\7\4\0\2\7\1\0\2\7\1\0\2\7\1\0"+
    "\2\7\2\0\1\31\1\0\5\31\4\0\2\31\2\0\3\31\3\0\1\31\7\0\4\7\1\0\1\7\7\0\4\31"+
    "\3\7\1\31\2\0\1\7\1\0\2\7\1\0\3\7\2\31\1\0\3\31\2\0\1\7\11\0\1\31\1\7\1\0"+
    "\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\2\7\4\0\5\31\3\0"+
    "\3\31\1\0\4\31\2\0\1\7\6\0\5\31\1\0\5\7\3\0\1\7\7\31\1\0\2\31\5\0\2\31\1\0"+
    "\4\7\1\0\3\7\1\0\2\7\5\0\3\7\2\0\1\7\3\31\1\0\4\31\1\7\10\0\1\7\2\0\2\31\1"+
    "\0\7\7\1\0\1\7\4\0\1\31\4\0\6\31\1\0\1\31\3\0\2\31\4\0\1\7\1\31\2\7\4\31\7"+
    "\7\10\31\1\0\2\31\7\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\3\7"+
    "\1\0\1\7\1\0\1\7\2\0\2\7\1\0\3\7\2\31\1\0\2\31\1\7\2\0\5\7\1\0\1\7\1\0\6\31"+
    "\2\0\2\31\2\0\4\7\5\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31\5\7\10\31\11\0\1\31"+
    "\1\0\7\31\1\7\2\31\4\7\3\31\1\7\3\31\2\7\7\31\3\7\4\31\5\7\14\31\1\7\1\31"+
    "\3\7\1\0\7\7\2\0\3\31\6\7\2\0\1\3\11\7\3\31\3\0\2\7\2\31\4\0\1\7\1\0\2\31"+
    "\4\0\4\7\10\31\3\0\1\7\4\0\1\7\1\31\5\0\3\31\2\0\1\7\1\31\1\7\5\0\4\31\4\0"+
    "\4\7\4\0\5\31\3\7\3\31\5\7\2\31\3\0\3\7\3\31\1\0\5\31\4\7\1\31\4\7\3\31\2"+
    "\7\5\0\4\31\1\0\1\7\1\0\1\7\1\0\1\7\1\0\1\7\2\0\3\7\1\0\6\7\2\0\2\7\13\3\1"+
    "\0\2\31\2\0\2\1\5\0\1\3\1\31\13\0\1\31\12\0\1\3\1\0\1\31\3\0\3\31\2\0\1\7"+
    "\4\0\1\7\1\0\5\7\2\0\1\7\1\0\4\7\1\0\3\7\2\0\4\7\5\0\5\7\4\0\1\7\4\0\4\7\3"+
    "\31\2\7\4\0\1\3\4\0\3\7\1\0\2\31\2\0\3\7\6\31\1\0\3\7\1\31\3\7\1\31\4\7\1"+
    "\31\4\7\3\0\1\7\1\0\1\7\2\0\5\7\1\31\2\7\2\31\5\7\1\0\4\7\2\31\4\0\1\7\3\31"+
    "\2\7\1\31\5\7\2\31\3\0\3\7\4\0\3\7\2\31\2\0\6\7\1\0\3\31\1\0\2\31\5\0\5\7"+
    "\5\0\1\7\1\31\3\7\1\0\2\7\1\0\2\7\3\0\2\31\10\0\3\31\5\7\2\0\1\3\3\7\4\0\1"+
    "\31\6\0\2\7\2\0\3\7\3\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\0\1\3\2\1\1\4\1\5\1\6"+
    "\1\3\1\7\1\10\1\11\1\12\1\3\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\2\1\27\1\30\1\31\1\32\1\33"+
    "\1\31\1\32\1\0\1\34\2\0\1\35\1\36\2\0"+
    "\1\34\23\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\250\0\u0150\0\u017a\0\250\0\250\0\u01a4\0\250\0\u01ce"+
    "\0\250\0\250\0\250\0\250\0\250\0\250\0\250\0\250"+
    "\0\250\0\250\0\250\0\250\0\u01f8\0\250\0\250\0\u0222"+
    "\0\u024c\0\250\0\u0276\0\u02a0\0\u017a\0\u02ca\0\u02f4\0\u031e"+
    "\0\250\0\250\0\u0348\0\u0372\0\250\0\u039c\0\u03c6\0\u03f0"+
    "\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\16\12\1\15\1\5\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\5\33\35\1\36\15\35"+
    "\1\37\10\40\1\41\36\40\1\42\2\40\10\43\1\44"+
    "\37\43\1\42\1\43\53\0\1\6\1\0\2\6\46\0"+
    "\1\6\1\0\1\6\1\7\2\0\1\12\1\45\1\0"+
    "\21\12\24\0\1\46\1\47\47\0\1\12\2\0\1\12"+
    "\1\45\1\0\21\12\30\0\1\50\72\0\1\16\53\0"+
    "\1\51\15\0\33\35\1\0\15\35\1\0\10\40\1\0"+
    "\36\40\1\0\2\40\47\0\1\52\2\0\10\43\1\0"+
    "\37\43\1\0\1\43\50\0\1\52\1\0\1\46\2\0"+
    "\47\46\6\47\1\53\43\47\12\0\1\54\37\0\5\47"+
    "\1\55\1\53\43\47\13\0\1\56\52\0\1\57\52\0"+
    "\1\60\52\0\1\61\52\0\1\62\52\0\1\63\52\0"+
    "\1\64\52\0\1\65\44\0\1\66\57\0\1\67\52\0"+
    "\1\70\45\0\1\71\56\0\1\72\44\0\1\73\57\0"+
    "\1\74\52\0\1\75\42\0\1\76\44\0\1\77\53\0"+
    "\1\100\54\0\1\12\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1722];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\0\1\11\3\1\1\11\2\1\2\11\1\1"+
    "\1\11\1\1\14\11\1\1\2\11\2\1\1\11\2\1"+
    "\1\0\1\1\2\0\2\11\2\0\1\11\23\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    int braceCount = 0;

  private int yyline;

  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PeggyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall though
        case '\u000C':  // fall though
        case '\u0085':  // fall though
        case '\u2028':  // fall though
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 31: break;
          case 2: 
            { return PeggyTypes.CODE_BODY;
            } 
            // fall through
          case 32: break;
          case 3: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 4: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_CHOICE;
            } 
            // fall through
          case 34: break;
          case 5: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_STAR;
            } 
            // fall through
          case 35: break;
          case 6: 
            { yybegin(YYINITIAL); return PeggyTypes.IDENTIFIER_NAME;
            } 
            // fall through
          case 36: break;
          case 7: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_PLUCK;
            } 
            // fall through
          case 37: break;
          case 8: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_DOLLAR;
            } 
            // fall through
          case 38: break;
          case 9: 
            { yybegin(YYINITIAL); return PeggyTypes.INTEGER;
            } 
            // fall through
          case 39: break;
          case 10: 
            { braceCount++;yybegin(CODE); return PeggyTypes.LEFT_BRACE;
            } 
            // fall through
          case 40: break;
          case 11: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_EQ;
            } 
            // fall through
          case 41: break;
          case 12: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_COLON;
            } 
            // fall through
          case 42: break;
          case 13: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_OR;
            } 
            // fall through
          case 43: break;
          case 14: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_AND;
            } 
            // fall through
          case 44: break;
          case 15: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_OPTIONAL;
            } 
            // fall through
          case 45: break;
          case 16: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_COMMA;
            } 
            // fall through
          case 46: break;
          case 17: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_PLUS;
            } 
            // fall through
          case 47: break;
          case 18: 
            { yybegin(YYINITIAL); return PeggyTypes.OP_NOT;
            } 
            // fall through
          case 48: break;
          case 19: 
            { yybegin(YYINITIAL); return PeggyTypes.LEFT_PAREN;
            } 
            // fall through
          case 49: break;
          case 20: 
            { yybegin(YYINITIAL); return PeggyTypes.RIGHT_PAREN;
            } 
            // fall through
          case 50: break;
          case 21: 
            { string.setLength(0); yybegin(DOUBLE_STRING);
            } 
            // fall through
          case 51: break;
          case 22: 
            { string.setLength(0); yybegin(SINGLE_STRING);
            } 
            // fall through
          case 52: break;
          case 23: 
            { braceCount++;return PeggyTypes.LEFT_BRACE;
            } 
            // fall through
          case 53: break;
          case 24: 
            { if(--braceCount==0){yybegin(YYINITIAL);} return PeggyTypes.RIGHT_BRACE;
            } 
            // fall through
          case 54: break;
          case 25: 
            { string.append( yytext() );
            } 
            // fall through
          case 55: break;
          case 26: 
            { string.append('\\');
            } 
            // fall through
          case 56: break;
          case 27: 
            { yybegin(YYINITIAL);return PeggyTypes.STRING;
            } 
            // fall through
          case 57: break;
          case 28: 
            { yybegin(YYINITIAL); return PeggyTypes.COMMENT;
            } 
            // fall through
          case 58: break;
          case 29: 
            { braceCount++;yybegin(CODE); return PeggyTypes.OP_RANGE;
            } 
            // fall through
          case 59: break;
          case 30: 
            { string.append('\"');
            } 
            // fall through
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
